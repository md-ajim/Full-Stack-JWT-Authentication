"""
Django settings for settings project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
load_dotenv()
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG')

ALLOWED_HOSTS = [
    "full-stack-jwt-authentication.onrender.com",
    "localhost",
    "127.0.0.1"
]



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'social_django',
    'corsheaders', #
    'Authentication', 
    'unfold', # Admin panel customization.
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed
    "unfold.contrib.import_export",  # optional, if django-import-export package is used
    "unfold.contrib.guardian",  # optional, if django-guardian package is used
    "unfold.contrib.simple_history",  # optional, if django-simple-history package is used
    'django.contrib.auth',
    'simple_history',
    


]


from .unfold_callbacks import (
    environment_callback,
    environment_title_prefix_callback,
    dashboard_callback,

)

from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _



UNFOLD = {
    "SITE_TITLE": "Admin | ShopPlus",
    "SITE_HEADER": "ShopPlus Admin",
    "SITE_SUBHEADER": "Manage Users and Access",
    "SITE_URL": "/",
    "SITE_ICON": {
        "light": lambda request: static("icons/icon-light.svg"),
        "dark": lambda request: static("icons/icon-dark.svg"),
    },
    "SITE_LOGO": {
        "light": lambda request: static("logos/logo-light.PNG"),
        "dark": lambda request: static("logos/logo-dark.svg"),
    },
    "SITE_SYMBOL": "person",  # Material icon
    "SITE_FAVICONS": [
        {
            "rel": "icon",
            "sizes": "32x32",
            "type": "image/svg+xml",
            "href": lambda request: static("favicons/favicon.svg"),
        },
    ],

     "SITE_DROPDOWN": [
        {
            "icon": "diamond",
            "title": _("Auth"),
            "link": "http://localhost:3000/",
        },
        # ...
    ],

      "SITE_SYMBOL": "speed",  # symbol from icon set
    
    "SHOW_HISTORY": True,
    "SHOW_VIEW_ON_SITE": True,
    "SHOW_BACK_BUTTON": True,
    "ENVIRONMENT": environment_callback,
    "ENVIRONMENT_TITLE_PREFIX": environment_title_prefix_callback,
    "DASHBOARD_CALLBACK": dashboard_callback,
    "THEME": True,
    "LOGIN": {
        "image": lambda request: static("images/login-bg.jpg"),
        "redirect_after": lambda request: reverse_lazy("admin:Authentication_customuser_changelist"),
    },
    "STYLES": [
        lambda request: static("css/style.css"),
    ],
    "SCRIPTS": [
        lambda request: static("js/script.js"),
    ],
    "BORDER_RADIUS": "8px",
    "COLORS": {
        "base": {
            "50": "249 250 251",
            "100": "243 244 246",
            "200": "229 231 235",
            "300": "209 213 219",
            "400": "156 163 175",
            "500": "107 114 128",
            "600": "75 85 99",
            "700": "55 65 81",
            "800": "31 41 55",
            "900": "17 24 39",
            "950": "3 7 18",
        },
        "primary": {
            "50": "240 249 255",
            "100": "224 242 254",
            "200": "186 230 253",
            "300": "125 211 252",
            "400": "56 189 248",
            "500": "14 165 233",
            "600": "2 132 199",
            "700": "3 105 161",
            "800": "7 89 133",
            "900": "12 74 110",
            "950": "8 47 73",
        },
        "font": {
            "subtle-light": "var(--color-base-500)",
            "subtle-dark": "var(--color-base-400)",
            "default-light": "var(--color-base-600)",
            "default-dark": "var(--color-base-300)",
            "important-light": "var(--color-base-900)",
            "important-dark": "var(--color-base-100)",
        },
    },
    "EXTENSIONS": {
        "modeltranslation": {
            "flags": {
                "en": "üá¨üáß",
                "bn": "üáßüá©",
            },
        },
    },
    "SIDEBAR": {
        "show_search": True,
        "show_all_applications": True,
        "navigation": [
            {
                "title": _("User Management"),
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": _("Dashboard"),
                        "icon": "dashboard",
                        "link": reverse_lazy("admin:index"),
                        # "badge": "sample_app.badge_callback",
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Users"),
                        "icon": "people",
                        "link": reverse_lazy("admin:Authentication_customuser_changelist"),
                        "permission": lambda request: request.user.is_staff,
                    },
                ],
            },
        ],
    },
    "TABS": [
        {
            "models": [
                "authentication.customuser",
            ],
            "items": [
                {
                    "title": _("All Users"),
                    "link": reverse_lazy("admin:Authentication_customuser_changelist"),
                    "permission": lambda request: request.user.is_staff,
                },

            #     {
            #     "title": _("Active Users"),
            #     "link": reverse_lazy("active_users_view"),  # ‡¶ï‡ßã‡¶® admin namespace ‡¶®‡ßá‡¶á ‡¶è‡¶ñ‡¶æ‡¶®‡ßá
            #     "permission": lambda request: request.user.is_staff,
            # },


            ],
        },
    ],
}





MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]


REST_FRAMEWORK ={
    'DEFAULT_AUTHENTICATION_CLASSES':(
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # simple jwt auth
    ),

  'DEFAULT_PERMISSION_CLASSES' : (
      'rest_framework.permissions.IsAuthenticated',
  )

}

ROOT_URLCONF = 'settings.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'template')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]




WSGI_APPLICATION = 'settings.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.mysql",
#         'NAME': os.environ.get('DATABASE_NAME'),
#         "USER": os.environ.get('DATABASE_USER'),
#         "PASSWORD": os.environ.get('DATABASE_PASSWORD'),
#         "HOST": "localhost",  # Or your MySQL server IP
#         "PORT": "3306",
#     }
# }



DATABASES={
    'default' :{
     'ENGINE': 'django.db.backends.sqlite3',
     'NAME': BASE_DIR / 'my_custom_database.sqlite3',
    }
}





# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/




BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_URL = '/static/'
MEDIA_URL = '/media/'

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # ‡¶Ø‡¶¶‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ custom static ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶•‡¶æ‡¶ï‡ßá

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')    # ‡¶è‡¶ü‡¶æ production ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø collectstatic ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')  

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Gmail SMTP configuration

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # Simple Mail Transfer Protocol
EMAIL_HOST = 'smtp.gmail.com' # configuration Gmail server
EMAIL_PORT = 587  # TLS encrypted SMTP port
EMAIL_USE_TLS = True  # Use TLS encryption 
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL =os.environ.get('DEFAULT_FROM_EMAIL')

                 

CORS_ALLOWED_ORIGINS =[
    'http://localhost:3000',
    "http://192.168.0.100:3000",
]

AUTH_USER_MODEL = 'Authentication.CustomUser'


# Google configuration
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get('GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get('GOOGLE_OAUTH2_SECRET')


SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    "https://www.googleapis.com/auth/userinfo.email",
    "https://www.googleapis.com/auth/userinfo.profile",
]


AUTHENTICATION_BACKENDS = (
    "social_core.backends.google.GoogleOAuth2",
    "django.contrib.auth.backends.ModelBackend",
)


